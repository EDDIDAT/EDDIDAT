function CreatDiffGUI()
h.CreateDiffractometer = figure('Name','Create Diffractometer','MenuBar','none','ToolBar','none','NumberTitle','off','Tag','CreateDiff','Position', [25 50 1250 550]);
% assignin('base', 'mydata', h.myfig);
% set (gcf, 'units', 'normalized', 'outerposition', [0.1 0.1 .759 .795]);
set (gcf, 'units', 'normalized', 'outerposition', [0.1 0.1 .759 .78]);
% set (gcf, 'WindowButtonMotionFcn', @mouseMove);
% set (gcf, 'units', 'normalized', 'outerposition', [0 0 1 1]);
% MaximizeFigureWindow
s = warning('off', 'MATLAB:uitabgroup:OldVersion');
h.TabGroup = uitabgroup('Parent',h.CreateDiffractometer,'units', 'normalized');
h.Tabs(1) = uitab('Parent',h.TabGroup, 'Title','Create diffractometer');
h.CreateDiffpanel = uipanel( ...
'Parent', h.Tabs(1),...
'Units', 'Normalized', ...
'Position', [0.0025 0.0025 0.996 0.995], ...
'Title', 'Create diffractometer file' ...
);

h.textelementDiff1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.003 0.955 0.175 0.04] ,...
'HorizontalAlignment', 'left', ...
'String', 'Load measurement file from which a new diffactometer file should be created. The file and scan headers must conform to some formatting. A sample file is included with the program.' ...
);

% Create graphic objects in "Create diffractometer" Panel
% Edit field that shows the current measurement file
h.selectfilename = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.003 0.925 0.125 0.025], ...
'Tag', 'selectfilename', ...
'Enable', 'on', ...
'String', 'Select measurement file...' ...
);
% Open button in order to load the measurement file
h.openbutton1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'Pushbutton', ...
'Units', 'Normalized', ...
'Position', [0.135 0.925 0.04 0.025], ...
'String', 'Open', ...
'Tag', 'Loadbutton1', ...
'Callback', {@OpenFileCallback} ...
);

%% Listbox that shows the first 30 lines of the file loaded
% Title of listbox
h.titlelistbox1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'FontWeight', 'bold' ,...
'Position', [0.003 0.89 0.2 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Preview of the first 50 lines of the measurement file' ...
);
% Listbox for preview of file header
h.PeviewFileHeaderListBox = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'listbox', ...
'Units', 'Normalized', ...
'Position', [0.003 0.652 0.4 0.24], ...
'String', '-- Preview of file header wil be shown here --', ...
'Tag', 'PeviewFileHeaderListBox', ...
'Enable', 'inactive' ...
);
% Title for input of file header literals
h.textliteralsfileheader1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'FontWeight', 'bold' ,...
'Position', [0.003 0.625 0.2 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Define literals for import of file header' ...
);

% Edit field for file header literals
h.defineliteralfh1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.03 0.6 0.0275 0.025], ...
'Tag', 'defineliteralfh1', ...
'Enable', 'on', ...
'String', '#F' ...
);

h.textliteralsfileheader1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.005 0.6 0.025 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Filename' ...
);

h.defineliteralfh2 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.095 0.6 0.035 0.025], ...
'Tag', 'defineliteralfh2', ...
'Enable', 'on', ...
'String', '#S' ...
);

h.textliteralsfileheader2 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.0625 0.6 0.03 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Scan name' ...
);

h.defineliteralfh3 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.17 0.6 0.02 0.025], ...
'Tag', 'defineliteralfh3', ...
'Enable', 'on', ...
'String', '#O' ...
);

h.textliteralsfileheader3 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.135 0.6 0.035 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Motor names' ...
);

h.defineliteralfh4 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.23 0.6 0.02 0.025], ...
'Tag', 'defineliteralfh4', ...
'Enable', 'on', ...
'String', '#P' ...
);

h.textliteralsfileheader4 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.195 0.6 0.035 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Motor values' ...
);

h.defineliteralfh5 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.3125 0.6 0.02 0.025], ...
'Tag', 'defineliteralfh5', ...
'Enable', 'on', ...
'String', '#C' ...
);

h.textliteralsfileheader5 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.255 0.6 0.0565 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Last line of file header' ...
);

% OK button for import of file header
h.importFileHeader = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'Pushbutton', ...
'Units', 'Normalized', ...
'Position', [0.34 0.6 0.06 0.025], ...
'String', 'Import file header', ...
'Tag', 'importmotornames', ...
'Callback', {@importfileheader} ...
);

% OK button for import of scan
h.importScan = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'Pushbutton', ...
'Units', 'Normalized', ...
'Position', [0.42 0.6 0.06 0.025], ...
'String', 'Import single scan', ...
'Tag', 'importscan', ...
'Callback', {@importscan} ...
);

% Text explaining how the user can define literals
h.textelementDiff1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.003 0.463 0.123 0.125] ,...
'HorizontalAlignment', 'left', ...
'String', {'Define literals needed to import the measurement file. File header and scan header should be con- sidered separately.', ...
'',...
'Motor literals and names can be defined manually in the right table, in case they are not listed under a single literal.',...
'If there is a blank line between the scan header and the data points click the checkbox.'} ...
);

% Create table where the user can define the motor name literals, in case
% they are not listed properly.
% Data for empty table
MotorNumber = cellstr(string(1:32)');
tabledata1 = cell(size(MotorNumber,1),1);
tabledata2 = cell(size(MotorNumber,1),1);

% Default value for popup menu
tabledata1(:) = {'   define literal'};
tabledata2(:) = {'   enter name'};

% Create table for user defined motor names
h.tabledefinemotornames = uitable('Parent', h.CreateDiffpanel, ...
'Units', 'Normalized', ...
'Position', [0.13 0.465 0.203 0.123], ...
'Rowname', [], ...
'ColumnWidth', {30 80 80 30 80 80 30 80 80}, ...
'ColumnName', {'No.' 'Literal motor' 'Motor name' 'No.' 'Literal motor' 'Motor name' 'No.' 'Literal motor' 'Motor name'} ,...
'ColumnFormat',({char char char char char char char char char}), ...
'ColumnEditable',[false true true false true true false true true], ...
'Data',[MotorNumber(1:8) tabledata1(1:8) tabledata2(1:8) MotorNumber(9:16) tabledata1(9:16) tabledata2(9:16) MotorNumber(17:24) tabledata1(17:24) tabledata2(17:24)]);


% Title of file header listbox
h.titlefileheaderlistbox1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'FontWeight', 'bold' ,...
'Position', [0.003 0.44 0.2 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'File header' ...
);

h.FileHeaderListBox = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'listbox', ...
'Units', 'Normalized', ...
'Position', [0.003 0.33 0.4 0.11], ...
'String', '-- File header wil be shown here --', ...
'Tag', 'FileHeaderListBox', ...
'Enable', 'inactive' ...
);

% Load button for import of motor names
h.importmotornames = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'Pushbutton', ...
'Units', 'Normalized', ...
'Position', [0.17 0.29 0.06 0.025], ...
'String', 'Load motor names', ...
'Tag', 'importmotornames', ...
'Callback', {@importmotornames} ...
);

% Default table data for motor names
datastring = {'    motor name'};
tabledata = repmat(datastring,8,1);
popupmenudata = cell(size(tabledata,1),1);

% Default value for popup menu
popupmenudata(:) = {'choose positioner'};

% Create table for motor names
h.tablemotornames = uitable('Parent', h.CreateDiffpanel, ...
'Units', 'Normalized', ...
'Position', [0.003 0.12 0.3365 0.155], ...
'ColumnWidth', {80 130 80 130 80 130 80 130}, ...
'ColumnName', {'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner'} ,...
'ColumnFormat',({char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
                char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
                char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
                char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'}}), ...
'ColumnEditable',[false true false true false true false true], ...
'Data',[tabledata popupmenudata tabledata popupmenudata tabledata popupmenudata tabledata popupmenudata]);
% ColumnFormat: eine Zeile wurde gelöscht, scheint zu viel gewesen zu sein

% % Create table for motor names
% h.tablemotornames = uitable('Parent', h.CreateDiffpanel, ...
% 'Units', 'Normalized', ...
% 'Position', [0.003 0.12 0.3365 0.155], ...
% 'ColumnWidth', {80 130 80 130 80 130 80 130}, ...
% 'ColumnName', {'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner'} ,...
% 'ColumnFormat',({char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
%                 char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
%                 char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'} ...
%                 char {'choose positioner' 'Sample Positioner' 'Detector Positioner' 'Source Positioner'}}), ...
% 'ColumnEditable',[false true false true false true false true], ...
% 'Data',[tabledata popupmenudata tabledata popupmenudata tabledata popupmenudata tabledata popupmenudata]);

% Text explaining how the user can create the diffractometer
h.textelementDiff1 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.003 0.2825 0.16 0.04] ,...
'HorizontalAlignment', 'left', ...
'String', 'Load motor names from file header. Then select the appropriate positioner from the drop down menu in order to assign the motors to the new diffractometer file.' ...
);

% Select motors that account for the requiered motors for stress analysis
% Default table data for motor names
tabledata1 = {'  omega' '  tth' '  phi' '  psi'}';
popupmenudata = cell(size(tabledata1,1),1);

% Default value for popup menu
popupmenudata(:) = {'choose positioner'};

% Create table for motor names
h.tablevirtualmotors = uitable('Parent', h.CreateDiffpanel, ...
'Units', 'Normalized', ...
'Position', [0.003 0.01 0.1585 0.0875], ...
'ColumnWidth', {120 160}, ...
'ColumnName', {'Motor EDDIDAT' 'Motor diffractometer'} ,...
'ColumnFormat',({char {'choose motor' 'motor1' 'motor2' 'motor3'}}), ...
'ColumnEditable',[false true], ...
'CellEditCallback',{@updatetablebkgdata}, ...
'Data',[tabledata1 popupmenudata]);

% Text explaining how the user can create the diffractometer
h.textelementDiff2 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'Position', [0.17 0.05 0.17 0.04] ,...
'HorizontalAlignment', 'left', ...
'String', 'Assign the internal motors of EDDIDAT to the corresponding motors of the new diffractometer. Then select a name for the diffractometer and create the new diffractometer file.' ...
);

% Edit field to enter the diffractometer name
h.enterdifffilename = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'edit', ...
'Units', 'Normalized', ...
'Position', [0.17 0.01 0.1 0.025], ...
'Tag', 'enterdifffilename', ...
'Enable', 'inactive', ...
'String', 'Enter name for diffractometer', ...
'ButtonDownFcn', {@clearbuttondown} ...
);

% Create diffractometer button
h.creatediffractometer = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'Pushbutton', ...
'Units', 'Normalized', ...
'Position', [0.2775 0.01 0.06 0.025], ...
'String', 'Create diffractometer', ...
'Tag', 'creatediffractometer', ...
'Callback', {@creatediffractometer} ...
);


% Title of listbox
h.titlelistbox2 = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'text', ...
'Units', 'Normalized', ...
'FontWeight', 'bold' ,...
'Position', [0.42 0.89 0.2 0.02] ,...
'HorizontalAlignment', 'left', ...
'String', 'Preview of a single scan of the measurement file' ...
);

h.ScanHeaderListBox = uicontrol( ...
'Parent', h.CreateDiffpanel, ...
'Style', 'listbox', ...
'Units', 'Normalized', ...
'Position', [0.42 0.652 0.4 0.24], ...
'String', '-- Scan header wil be shown here. Define the correct literal first. --', ...
'Tag', 'ScanHeaderEditField', ...
'Enable', 'inactive' ...
);

guidata(h.CreateDiffractometer, h);

function OpenFileCallback(hObj,~)
% Callback for "Open File" pushbutton
h = guidata(hObj);

% h = handles;
% Open file dialog box - Folder may have to be changed manually
[FileName,FilePath]  = uigetfile('*.*','Load measurement file',[General.ProgramInfo.Path,'\Data\Measurements\']);

if FileName == 0
  % user pressed cancel
  return
end

Path = fullfile(FilePath, FileName);
h.MeasFile = Tools.StringOperations.AsciiFile2Text(Path,'\r\n');

assignin('base','M',h.MeasFile)

% Read first 50 lines from file header and write to listbox
for i_c = 1:50
    HeaderLines{i_c,:} = h.MeasFile(i_c,1:end);
end

set(h.PeviewFileHeaderListBox,'string',string(HeaderLines))

ExPath = fullfile(FilePath, FileName);
% Set FileName to string and ExPath to UserData of Edit-Field
set(h.selectfilename,'string',FileName)
set(h.selectfilename,'UserData',ExPath)

guidata(hObj, h);

function importfileheader(hObj,~)
% Callback for import of file header
h = guidata(hObj);

LastLineHeader = get(h.defineliteralfh5,'String');

Index_tmp = Tools.StringOperations.SearchString(h.MeasFile, LastLineHeader);

for i_c = 1:Index_tmp(end,1)
    FileHeaderLines{i_c,:} = h.MeasFile(i_c,1:end);
end

set(h.FileHeaderListBox,'string',string(FileHeaderLines))

guidata(hObj, h);

function importscan(hObj,~)
% Callback for import of file header
h = guidata(hObj);

Literal = get(h.defineliteralfh2,'String');
%Indizies des Scanliterals
Index_Scan = Tools.StringOperations.SearchString(h.MeasFile, Literal);
% %Indizies der Leerzeilen
% Index_BlankLines = Tools.StringOperations.SearchBlankLines(h.MeasFile);
% %--> Imaginäre Leerzeile am Ende des MessFiles einfügen
% if Index_BlankLines(end) ~= size(h.MeasFile,1)
%     Index_BlankLines(end+1) = size(h.MeasFile,1) + 1;
% end

if size(Index_Scan,1) < 2
%     Index_NextBlankLine = find(Index_BlankLines > Index_Scan(1),1,'first');
%     ScanLines = h.MeasFile(Index_Scan(i_c):Index_BlankLines(Index_NextBlankLine)-1,:);
    ScanLines = h.MeasFile(Index_Scan(1):end,:);
else
    ScanLines = h.MeasFile(Index_Scan(1):Index_Scan(2)-1,:);
end

set(h.ScanHeaderListBox,'string',string(ScanLines))

guidata(hObj, h);


function importmotornames(hObj,~)
% Callback for import of motor names
h = guidata(hObj);
% Get literal for motors from edit field
LiteralMotors = get(h.defineliteralfh3,'String');

% Find motor names
Index_tmp = Tools.StringOperations.SearchString(h.MeasFile,LiteralMotors);
%Prealloc, jede Zeile enthält die Motornamen
h.MotorNames = cell(size(Index_tmp,1),1);
%--> Scannen aller Zeilen
for i_c = 1:size(Index_tmp,1)
    h.MotorNames{i_c} = Tools.StringOperations.ScanWords(...
    h.MeasFile(Index_tmp(i_c),4:end));
end
assignin('base','MotorNames',h.MotorNames)
% Table data
motortabledata_tmp = h.MotorNames';
% Make cell arrays the same length
maxlen = max(cellfun(@numel, motortabledata_tmp));
motortabledata = cellfun(@(s) [s, repmat({''}, 1, maxlen - numel(s))], motortabledata_tmp, 'UniformOutput', false);
% Create drop down 
modedata = cell(maxlen,1);
modedata(:) = {'choose positioner'};
% Set table data
if size(motortabledata,2) == 2
    set(h.tablemotornames, 'data',[motortabledata{1}' modedata motortabledata{2}' modedata])
    set(h.tablemotornames, 'ColumnWidth',{80 130 80 130 80 130})
    set(h.tablemotornames, 'ColumnName',{'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner'})
    set(h.tablemotornames, 'ColumnEditable',[false true false true false true])    
elseif size(motortabledata,2) == 3
    set(h.tablemotornames, 'data',[motortabledata{1}' modedata motortabledata{2}' modedata motortabledata{3}' modedata])
    set(h.tablemotornames, 'ColumnWidth',{80 130 80 130 80 130})
    set(h.tablemotornames, 'ColumnName',{'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner'})
    set(h.tablemotornames, 'ColumnEditable',[false true false true false true])
elseif size(motortabledata,2) == 4
    set(h.tablemotornames, 'data',[motortabledata{1}' modedata motortabledata{2}' modedata motortabledata{3}' modedata motortabledata{4}' modedata])
    set(h.tablemotornames, 'ColumnWidth',{80 130 80 130 80 130 80 130})
    set(h.tablemotornames, 'ColumnName',{'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner ' 'Motor' 'Positioner'})
    set(h.tablemotornames, 'ColumnEditable',[false true false true false true false true])
elseif size(motortabledata,2) == 5
    set(h.tablemotornames, 'data',[motortabledata{1}' modedata motortabledata{2}' modedata motortabledata{3}' modedata motortabledata{4}' modedata motortabledata{5}' modedata])
    set(h.tablemotornames, 'ColumnWidth',{80 130 80 130 80 130 80 130 80 130})
    set(h.tablemotornames, 'ColumnName',{'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner' 'Motor' 'Positioner'})
    set(h.tablemotornames, 'ColumnEditable',[false true false true false true false true false true])    
end

% Set virtual motor table data
% Get diffractometer motor names
diffmotors = [h.MotorNames{1}';h.MotorNames{2}';h.MotorNames{3}'];
% Update popup menu content
set(h.tablevirtualmotors, 'ColumnFormat',{char ['choose motor'; diffmotors]'})

guidata(hObj, h);


function creatediffractometer(hObj,~)
% Callback for import of motor names
h = guidata(hObj);

% get positioner data from table data
positionerdata = string(get(h.tablemotornames, 'data'));

% assignin('base','positionerdata',positionerdata)

SourcePos = strcmp(positionerdata,'Source Positioner');
DetPos = strcmp(positionerdata,'Detector Positioner');
SamplePos = strcmp(positionerdata,'Sample Positioner');

% Get all motors
motors = positionerdata(:, [1, 3, 5]);
% Get motors for each positioner
sourcemotors = motors(SourcePos(:, [2,4,6]));
detmotors = motors(DetPos(:, [2,4,6]));
samplemotors = motors(SamplePos(:, [2,4,6]));

% assignin('base','sourcemotors',sourcemotors)
% assignin('base','detmotors',detmotors)
% assignin('base','samplemotors',samplemotors)

% get motor names for virtual motors
virtualmotordata = get(h.tablevirtualmotors, 'data');

assignin('base','virtualmotordata',virtualmotordata)

% Get diffractometer name defined by user
Diffname = get(h.enterdifffilename,'String');

% Create diffractometer
Diffractometer = Measurement.Diffractometer;
Diffractometer.Detector = Measurement.Detector;
Diffractometer.Name = Diffname;

% Add source positioners
for k = 1:length(sourcemotors)
    Diffractometer.SourcePositioner.(sourcemotors(k)) = Measurement.Motor;
end
% Add sample positioners
for k = 1:length(samplemotors)
    Diffractometer.SamplePositioner.(samplemotors(k)) = Measurement.Motor;
end
% Add detector positioners
for k = 1:length(detmotors)
    Diffractometer.DetectorPositioner.(detmotors(k)) = Measurement.Motor;
end

% Define virtual motors
Diffractometer.VirtualMotors.omega = char(h.usermotornames(1,2));
Diffractometer.VirtualMotors.tth = char(h.usermotornames(2,2));
Diffractometer.VirtualMotors.phi = char(h.usermotornames(3,2));
Diffractometer.VirtualMotors.psi = char(h.usermotornames(4,2));

Diffractometer.SaveToFile(Diffname)

guidata(hObj, h);

function clearbuttondown(hObj,~)
% ButtonDownFunc when user presses on the edit field
set(hObj, 'String','','Enable','on');
uicontrol(hObj);

function updatetablebkgdata(hObj, eventdata)
% Callback for updating user selected background points table 
h = guidata(hObj);
% get user sleceted motor names for virtual motors
h.usermotornames = eventdata.Source.Data;
guidata(hObj, h);