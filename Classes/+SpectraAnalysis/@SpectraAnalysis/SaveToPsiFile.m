% Diese Methode exportiert das Auswertungs-Objekt als PSI-File, um damit in
% Mathematica weiterarbeiten zu können
% Input: Filename, Dateiname (ohne Endung), string|va /
%        WriteDummyPeaks, gibt an, ob die Dummy-Peaks in den File
%         geschrieben werden sollen, logical|va
% Output: none
function SaveToPsiFile(obj,Filename,FileName,WriteDummyPeaks)%,Mode)

%% (* Stringenzprüfung *)
    validateattributes(Filename,{'char'},{'row'});
    validateattributes(WriteDummyPeaks,{'logical'},{'scalar'});
%     validateattributes(Mode,{'double'},...
%         {'real','scalar','positive','finite'})
       
%% (* Vorbereitung *)
    %Pfad bilden
    Path = Filename;
%     Path = fullfile(obj.FilePath,[Filename '.psi']);
    %Datei erzeugen
    fid = fopen(Path,'w');
    %DL als Vektor (Abkürzung)
    DL = obj.DiffractionLines(:);
    %Measurement mode
%     Modus = Mode;
    
%% (* Kopf hinzufügen *)
    %Datei-Name
%     fprintf(fid,'\n\n',Filename);
    fprintf(fid,'Dateiname: %s.\n\n',FileName);
    %Spalten
    fprintf(fid,['LNr     ',...
        'Emax   ',...
        'dEmax    ',...
        'Iint      ',...
        'Ib      ',...
        'tth     ',...
        'phiP   ',...
        'psiP   ',...
        'etaP  ',...
        'Ringstr  ',...
        'RT  ',...
        'DT   ',...
        'alpha  ',...
        'beta  ',...
        'xdiff   ',...
        'ydiff   ',...
        'zdiff   ',...
        'motor1   ',...
        'motor2   ',...
        'motor3   ',...
        'temp1   ',...
        'temp2   ',...
        'heatrate   ',...
        'deltatime          ',...
        'time','\n\n']);
    
%% (* Daten eintragen *)
    %DeltaTimes berechnen
    DeltaTime_tmp = repmat(obj.DeltaTime,size(obj.DiffractionLines,2),1);
    %--> Durchlaufen aller Peaks
    for i_c = 1:length(DL)
    % Sollen die Dummy-Peaks geschrieben werden?
        if (~WriteDummyPeaks && isnan(DL(i_c).Intensity_Int))
            continue;
        end
    % Peak-Infos
        fprintf(fid,'  %d.  %.3f  %.4f  %.2f  %.3f',...
            DL(i_c).LineNumber(2),...
            DL(i_c).Energy_Max,...
            DL(i_c).Energy_Max_Delta,...
            DL(i_c).Intensity_Int_calc,...
            DL(i_c).IntegralWidth);
    % Winkel
            fprintf(fid,'  %.4f  %.2f  %.2f  %.2f',...
                DL(i_c).twotheta,...
                DL(i_c).SCSAngles.phi,...
                DL(i_c).SCSAngles.psi,...
                DL(i_c).SCSAngles.eta); %,...
%                 DL(i_c).Measurement.Motors.omega);
%         end
    % Rahmenbedingung
        fprintf(fid,'  %.1f  %.1f  %.2f  %.2f  %.2f',...
            DL(i_c).RingCurrent,...
            DL(i_c).RealTime,...
            DL(i_c).DeadTime,...
            DL(i_c).SCSAngles.alpha,...
            DL(i_c).SCSAngles.beta);
    % Koordinaten und Motoren (werden auf Null gesetzt)
        fprintf(fid,'  %.4f  %.4f  %.4f  %.4f  %.4f  %.4f',...
            DL(i_c).Motors.x_achse,...
            DL(i_c).Motors.y_achse,...
            DL(i_c).Motors.z_achse,...
            DL(i_c).SampleStagePos(1),...
            DL(i_c).SampleStagePos(2),...
            DL(i_c).SampleStagePos(3));    
    % Temperaturen
        fprintf(fid,'  %.1f  %.1f  %.1f',...
            DL(i_c).Measurement.Temperatures(1),...
            DL(i_c).Measurement.Temperatures(2),...
            DL(i_c).Measurement.HeatRate);
    % Zeiten
        fprintf(fid,'  %.0f  %s\n',...
            DeltaTime_tmp(i_c),datestr(DL(i_c).Time,'dd-mm-yyyy-HH-MM-SS'));
            % Datumsausgabe angepasst, da sonst ein Fehler in Mathematica
            % auftritt.
%     % Leerzeile einfügen
%         fprintf(fid, '\n');
    end
    %Datei schließen
    fclose(fid);
end