classdef PV < rietveld.func.spec.diffpeaks.PeakInterface

	methods (Access = public)
		
		function Y = execute(obj, X, general, meas, phase, spec)
			
			ep = obj.sfwc.EnergyPos.execute([], general, meas, phase, spec);
			acm = obj.sfwc.AttenuationCoeffMat.execute(ep, general, meas, phase, spec);
			intensity = obj.sfwc.Intensity.execute(ep, acm, general, meas, phase, spec);
			eps_hkl = obj.sfwc.Strain.execute(acm, general, meas, phase, spec);
			
						
% 			FWHM = general.U_PV + general.W_PV .* ep;
% 			PVmix = general.PVmix_a + general.PVmix_b .* ep;
%             
%             H_k = (H_kG.^5 + 2.69269.*H_kG.^4.*H_kL + 2.42843.*H_kG.^3.*H_kL.^2 ...
% 				+ 4.47163.*H_kG.^2.*H_kL.^3 + 0.07842.*H_kG.*H_kL.^4 + H_kL.^5).^(0.2);
% 			GL = 1.36603 .* (H_kL ./ H_k) - 0.47719 .* (H_kL ./ H_k).^2 + 0.11116 .* (H_kL ./ H_k).^3;
			
			Y = 0;
			for i = 1:size(general.H, 1)
				X_shift = X - ep(i);
				Y = Y + intensity(i) * (general.PVmix(i) .* ... 
					(2/(pi*general.FWHM(i))) .* (1 + 4 * ((X_shift + eps_hkl(i) * ep(i))/general.FWHM(i)).^2).^(-1) ...
					+ (1 - general.PVmix(i)) * (2*sqrt(log(2)/pi)/general.FWHM(i)) ...
					* exp(-4 * log(2) * ((X_shift + eps_hkl(i) * ep(i))/general.FWHM(i)).^2));
			end
% 			disp(intensity)
		end
		
		function obj = addFunctionParameters(obj, pc)
			
            obj.addParameter(pc, 'PVmix',...
				'Category', 'Peaks',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'FWHM',...
				'Category', 'Peaks',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
% 			obj.addParameter(pc, 'Density',...
% 				'Category', 'Material',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			% TODO: Kategorie?
% 			obj.addParameter(pc, 'DEK_S1',...
% 				'Category', 'Material',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', true,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
% 			obj.addParameter(pc, 'DEK_S2',...
% 				'Category', 'Material',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', true,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
% 			
% 			obj.addParameter(pc, 'TwoTheta',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'DensityAir',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'DetectorDistance',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'RingCurrent',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', true);
% 			obj.addParameter(pc, 'DeadTime',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', true);
% 			obj.addParameter(pc, 'Psi',...
% 				'Category', 'Measurement',...
% 				'ParamSize', [1, 1],...
% 				'Constant', true,...
% 				'PhaseDep', false,...
% 				'SpecDep', true);
% 			
% 			obj.addParameter(pc, 'ScaleFactor',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
% 			obj.addParameter(pc, 'Multiplicity',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', true,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);

% 			obj.addParameter(pc, 'PVmix_a',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
% 			obj.addParameter(pc, 'PVmix_b',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
		end
	end
	
	methods (Access = protected)
		
		function obj = initSubFunctions(obj)
			
			obj.addSubFunction('AttenuationCoeffMat', 'rietveld.func.spec.corr.AttenuationCoeffMat', rietveld.func.spec.corr.AttenuationCoeffMat());
% 			obj.addSubFunction('AttenuationCoeffAir', 'rietveld.func.spec.corr.AttenuationCoeffAir', rietveld.func.spec.corr.AttenuationCoeffAir());
			obj.addSubFunction('EnergyPos', 'rietveld.func.spec.EnergyPosInterface', rietveld.func.spec.EnergyPosInterface());
% 			obj.addSubFunction('Wiggler', 'rietveld.func.spec.corr.WigglerInterface', rietveld.func.spec.corr.WigglerInterface());
% 			obj.addSubFunction('FHKL', 'rietveld.func.spec.diffpeaks.fhkl.FHKLInterface', rietveld.func.spec.diffpeaks.fhkl.LeBail());
			obj.addSubFunction('Intensity', 'rietveld.func.spec.diffpeaks.Intensity', rietveld.func.spec.diffpeaks.Intensity());
			obj.addSubFunction('Strain', 'rietveld.func.spec.diffpeaks.strain.StrainInterface', rietveld.func.spec.diffpeaks.strain.StrainInterface());
% 			obj.addSubFunction('StressMod', 'rietveld.func.spec.diffpeaks.stressmod.StressModInterface', rietveld.func.spec.diffpeaks.stressmod.StressModInterface());
		end
	end
end
