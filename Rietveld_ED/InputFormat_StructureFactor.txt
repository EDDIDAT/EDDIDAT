%% structure factor calculation
load(fullfile(rvpath,'data','Physics','AtomSF.mat'))
% Input of the atom form factor parameter
config.configParameter('SF_a',...
	'Value', [Atomdata(21,[1 3 5 7]); Atomdata(12,[1 3 5 7])]);
config.configParameter('SF_b',...
	'Value', [Atomdata(21,[2 4 6 8]); Atomdata(12,[2 4 6 8])]);
config.configParameter('SF_c',...
	'Value', [Atomdata(21,9); Atomdata(12,9)]);
% Input of the atom positions of the respective atom
% Positons of atom 1, where "1" desribes the position which is variable
% AP1 = [0 0 1; 0 0 -1; 0 0 -1; 0 0 1]; -> nicht mehr benoetigt
% Constant atom positions (the variable positions are also written into the 
% matrix)
AP1Const = [0 0 1; 0 0 -1; 0 0 -1; 0 0 1];
% Position of the atom which needs to be "corrected" (no. 1)
APosAP1 = [0 0 0; 0 0 1; 0 0 0; 0 0 1];
% Positons of atom 2, where "2,3" desribes the position which is variable
% AP2 = [2 0 3; -2 2 3; -2 -2 3; 0 -2 3; -2 0 3; 2 2 3]; -> nicht mehr
% benoetigt
% Constant atom positions (the variable positions are also written into the 
% matrix)
AP2Const =[2 0 1/4; 0 2 1/4; -2 -2 1/4; -2 0 3/4; 0 -2 3/4; 2 2 3/4];
% Position of the atom which needs to be "corrected" (no. 2)
APosAP2 = [0 0 0; 0 0 0; 0 0 0; 0 0 0; 0 0 0; 0 0 0];
% Input of the symmetry operators ("AP1" + SO...)
SO = [0 0 0; 2/3 1/3 1/3; 1/3 2/3 2/3];

% Create the matrix with all atom positions of all atoms (from AP1 and AP2)
config.configParameter('APConst',...
	'Value', [repmat(AP1Const,size(SO,1),1);repmat(AP2Const,size(SO,1),1)]);

% Input of the fit pattern to declare which atom coordinates are refinable 
% (0 = constant, 1(2,3) = refinable, -1(-2,-3) = negative of coordinate)
% A APFitPattern needs to be created for each atom.
APFitPattern1 = [0 0 1; 0 0 -1; 0 0 -1; 0 0 1];
APFitPattern2 = [2 0 0; 0 2 0; -2 -2 0; -2 0 0; 0 -2 0; 2 2 0];

config.configParameter('APFitPattern',...
	'Value', [repmat(APFitPattern1,size(SO,1),1);repmat(APFitPattern2,size(SO,1),1)]);
% Input of the start value of the refinable atom coordinate
% config.configParameter('APFitParams',...
% 	'Value', [0.3521; 0.3065; 0.25],...
% 	'LowerConstraint', 0,...
% 	'UpperConstraint', 1,...
% 	'Refinable', false);
config.configParameter('CountAPFitParams',...
	'Value', 2);
config.configParameter('APFitParam1',...
	'Value', 0.3522,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);
config.configParameter('APFitParam2',...
	'Value', 0.3066,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);
config.configParameter('APFitParam3',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);
config.configParameter('APFitParam4',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);
config.configParameter('APFitParam5',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);
config.configParameter('APFitParam6',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', 1,...
	'Refinable', false);

% Input of correction factors for the atom positions in AP1 and AP2 etc.
% The number of parameters needs to be the same as the numbers of
% APFitParams, due to the for-loop. That's why there is a "0".
config.configParameter('APosParam',...
	'Value', [1/2; 0],...
	'Refinable', false);
% Create the matrix with the atom positions that need to be corrected for
% the APosParam.
config.configParameter('APosPattern',...
	'Value', [repmat(APosAP1,size(SO,1),1);repmat(APosAP2,size(SO,1),1)]);

config.configParameter('AtomCoordinates',...
	'Value', [repmat(SO(1,:),size(APosAP1,1),1); repmat(SO(2,:),size(APosAP1,1),1); repmat(SO(3,:),size(APosAP1,1),1); ...
			  repmat(SO(1,:),size(APosAP2,1),1); repmat(SO(2,:),size(APosAP2,1),1); repmat(SO(3,:),size(APosAP2,1),1)]);
% Input of the atom coordinate count, that describes how many atom 
% coordinates per atom exist
config.configParameter('AtomCoordCnts',...
	'Value', [12; 18]);
% Input of anomalous scattering factors
load(fullfile(rvpath,'data','Physics','anomalousScattering','Alf1.mat'))
load(fullfile(rvpath,'data','Physics','anomalousScattering','Alf2.mat'))
load(fullfile(rvpath,'data','Physics','anomalousScattering','Of1.mat'))
load(fullfile(rvpath,'data','Physics','anomalousScattering','Of2.mat'))
config.configParameter('Atom1f1',...
	'Value', Alf1);
config.configParameter('Atom1f2',...
	'Value', Alf2);
config.configParameter('Atom2f1',...
	'Value', Of1);
config.configParameter('Atom2f2',...
	'Value', Of2);
% Input of the Debye-Waller factors (one for each atom, if less than 3
% atoms present, the other ones have to be set to zero.)
config.configParameter('DebyeWaller1',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', +Inf,...
	'Refinable', false);
config.configParameter('DebyeWaller2',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', +Inf,...
	'Refinable', false);
config.configParameter('DebyeWaller3',...
	'Value', 0,...
	'LowerConstraint', 0,...
	'UpperConstraint', +Inf,...
	'Refinable', false);