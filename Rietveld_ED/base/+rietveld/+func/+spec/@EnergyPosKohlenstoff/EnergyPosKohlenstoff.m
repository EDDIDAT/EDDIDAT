classdef EnergyPosKohlenstoff < rietveld.func.spec.EnergyPosInterface
%% (* EnergyPos *)
% Berechnung der theoretischen Energielagen.
% -------------------------------------------------------------------------
	
	methods (Access = public)
		
		function ep = execute(obj, ~, general, meas, phase, ~)
			
			% Passende Struktur wird ausgewaehlt
			if (general.LatticeParam1 ~= 0 && general.LatticeParam2 == 0 && general.LatticeParam3 == 0)
				LatticeParam_a = general.LatticeParam1;
				LatticeParam_b = general.LatticeParam1;
				LatticeParam_c = general.LatticeParam1;
			elseif (general.LatticeParam1 ~= 0 && general.LatticeParam2 == 0 && general.LatticeParam3 ~= 0)
				LatticeParam_a = general.LatticeParam1;
				LatticeParam_b = general.LatticeParam1;
				LatticeParam_c = general.LatticeParam3;
			elseif (general.LatticeParam1 ~= 0 && general.LatticeParam2 ~= 0 && general.LatticeParam3 ~= 0)
				LatticeParam_a = general.LatticeParam1;
				LatticeParam_b = general.LatticeParam2;
				LatticeParam_c = general.LatticeParam3;
			end

			% Berechnung der Gitterabstaende
			CellVolume = LatticeParam_a .* LatticeParam_b .* LatticeParam_c .* ...
				sqrt(1 - cosd(phase.Alpha).^2 - cosd(phase.Beta).^2 - cosd(phase.Gamma).^2 + ...
				2 .* cosd(phase.Alpha) .* cosd(phase.Beta) .* cosd(phase.Gamma));
			S_11 = LatticeParam_b.^2 .* LatticeParam_c.^2 .* sind(phase.Alpha).^2;
			S_22 = LatticeParam_a.^2 .* LatticeParam_c.^2 .* sind(phase.Beta).^2;
			S_33 = LatticeParam_a.^2 .* LatticeParam_b.^2 .* sind(phase.Gamma).^2;
			S_12 = LatticeParam_a .* LatticeParam_b .* LatticeParam_c.^2 .* ...
				(cosd(phase.Alpha) .* cosd(phase.Beta) - cosd(phase.Gamma));
			S_23 = LatticeParam_a.^2 .* LatticeParam_b .* LatticeParam_c .* ...
				(cosd(phase.Beta) .* cosd(phase.Gamma) - cosd(phase.Alpha));
			S_13 = LatticeParam_a .* LatticeParam_b.^2 .* LatticeParam_c .* ...
				(cosd(phase.Gamma) .* cosd(phase.Alpha) - cosd(phase.Beta));
			% Umrechnung auf Energieskala
            if phase.FitCarbonContent == false
                ep = 6.199 ./ (sind(meas.TwoTheta./2) * CellVolume) .* ...
                    sqrt(S_11.* (general.H).^2 + S_22 .* (general.K).^2 + S_33 .* (general.L).^2 + ...
                    2 .* S_12 .* general.H .* general.K + 2 .* S_23 .* general.K .* general.L + ...
                    2 .* S_13 .* general.H .* general.L);
%                         ep = sqrt(((general.H.^2 + general.K.^2)/(LatticeParam_a - 0.013 .* general.CarbonContent).^2) + ...
%                             (general.L.^2/(LatticeParam_a + 0.116 .* general.CarbonContent).^2) .* ...
%                             (6.199^2/sind(meas.TwoTheta./2).^2));
            elseif phase.FitCarbonContent == true
                ep = sqrt(((general.H.^2 + general.K.^2)/(2.8668 - 0.013 .* general.CarbonContent).^2 + ...
                            (general.L.^2/(2.8668 + 0.116 .* general.CarbonContent).^2)) .* ...
                            (6.199^2/sind(meas.TwoTheta./2).^2));
%                 for k = 1:length(general.H)
%                     if general.H(k) == 1 && general.K(k) == 0 && general.L(k) == 1
%                         ep(:,k) = sqrt((1/3.*(2/(2.8668 - 0.013 .* general.CarbonContent).^2) + ...
%                             2/3.*(1/(2.8668 - 0.013 .* general.CarbonContent).^2 + ...
%                             1/(LatticeParam_a + 0.116 .* general.CarbonContent).^2)) .* ...
%                             (6.199^2/sind(meas.TwoTheta./2).^2));
%                     elseif general.H(k) == 0 && general.K(k) == 0 && general.L(k) == 2
%                         ep(:,k) = sqrt((2/3.*(4/(2.8668 - 0.013 .* general.CarbonContent).^2) + ...
%                             1/3.*(4/(2.8668 + 0.116 .* general.CarbonContent).^2)) .* ...
%                             (6.199^2/sind(meas.TwoTheta./2).^2));
%                     elseif general.H(k) == 1 && general.K(k) == 1 && general.L(k) == 2
%                         ep(:,k) = sqrt((2/3.*(5/(2.8668 - 0.013 .* general.CarbonContent).^2 + ...
%                             1/(2.8668 + 0.116 .* general.CarbonContent).^2) + ...
%                             1/3.*(2/(2.8668 - 0.013 .* general.CarbonContent).^2 + ...
%                             4/(2.8668 + 0.116 .* general.CarbonContent).^2)) .* ...
%                             (6.199^2/sind(meas.TwoTheta./2).^2));
%                     elseif general.H(k) == 2 && general.K(k) == 0 && general.L(k) == 2
%                         ep(:,k) = sqrt((1/3.*(8/(LatticeParam_a - 0.013 .* general.CarbonContent).^2) + ...
%                             2/3.*(4/(2.8668 - 0.013 .* general.CarbonContent).^2 + ...
%                             4/(2.8668 + 0.116 .* general.CarbonContent).^2)) .* ...
%                             (6.199^2/sind(meas.TwoTheta./2).^2));    
%                     end
%                 end
%                 ep = ep';
%                 disp(ep)
            end
%             disp(ep)
		end
		
		function obj = addFunctionParameters(obj, pc)

			obj.addParameter(pc, 'TwoTheta',...
				'Category', 'Measurement',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', false,...
				'SpecDep', false);			
			obj.addParameter(pc, 'LatticeParam1',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'LatticeParam2',...
				'Category', 'Energy Positions',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'LatticeParam3',...
				'Category', 'Energy Positions',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'Alpha',...
				'Category', 'Energy Positions',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'Beta',...
				'Category', 'Energy Positions',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'Gamma',...
				'Category', 'Energy Positions',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'H',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'K',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'L',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
            obj.addParameter(pc, 'FitCarbonContent',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', false);
            obj.addParameter(pc, 'CarbonContent',...
				'Category', 'Energy Positions',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);			
		end
	end
	
	methods (Access = protected)
		
		function obj = initSubFunctions(obj)
		end
	end
end

