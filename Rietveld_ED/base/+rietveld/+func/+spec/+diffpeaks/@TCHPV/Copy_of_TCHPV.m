classdef TCHPV < rietveld.func.spec.diffpeaks.PeakInterface

	methods (Access = public)
		
		function Y = execute(obj, X, general, meas, phase, spec)
			
			ep = obj.sfwc.EnergyPos.execute([], general, meas, phase, spec);
			% Mehrfach benoetigt, aber hier nur einmal berechnet
			acm = obj.sfwc.AttenuationCoeffMat.execute(ep, general, meas, phase, spec);			
			intensity = obj.sfwc.Intensity.execute(ep, acm, general, meas, phase, spec);
			eps_hkl = obj.sfwc.Strain.execute(acm, general, meas, phase, spec);
			
% 			disp(acm)
			
			H_kG = sqrt(general.P_Size + general.U_Strain .* (ep.^2) + general.V_Detector .* ep);
			H_kL = general.X_Size + general.Y_Strain .* ep + general.Z_Detector .* (ep.^2);
			H_k = (H_kG.^5 + 2.69269.*H_kG.^4.*H_kL + 2.42843.*H_kG.^3.*H_kL.^2 ...
				+ 4.47163.*H_kG.^2.*H_kL.^3 + 0.07842.*H_kG.*H_kL.^4 + H_kL.^5).^(0.2);
			GL = 1.36603 .* (H_kL ./ H_k) - 0.47719 .* (H_kL ./ H_k).^2 + 0.11116 .* (H_kL ./ H_k).^3;
% 			disp(H_k)
% 			disp(H_kL)
			Y = 0;
            for i = 1:size(general.H, 1)
				X_shift = X - ep(i);
				Y = Y + intensity(i) * (GL(i) * (2 / (pi * H_k(i))) ./ ...
					(1 + 4 * ((X_shift + eps_hkl(i) * ep(i)) / H_k(i)).^2) ...
					+ (1 - GL(i)) * (2 * sqrt(log(2)/pi) / H_k(i)) * ...
					exp(-4 * log(2) * ((X_shift + eps_hkl(i) * ep(i)) / H_k(i)).^2));
            end
            
% 			disp(H_k)
% 			disp(GL)
% 			disp(ep)
% 			disp(intensity)

		end
		
		function obj = addFunctionParameters(obj, pc)
			
			obj.addParameter(pc, 'P_Size',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'U_Strain',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'V_Detector',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'X_Size',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'Y_Strain',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'Z_Detector',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
% 			obj.addParameter(pc, 'eps_hkl',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [4, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
		end
	end
	
	methods (Access = protected)
		
		function obj = initSubFunctions(obj)
			
			obj.addSubFunction('AttenuationCoeffMat', 'rietveld.func.spec.corr.AttenuationCoeffMat', rietveld.func.spec.corr.AttenuationCoeffMat());
			obj.addSubFunction('EnergyPos', 'rietveld.func.spec.EnergyPosInterface', rietveld.func.spec.EnergyPosInterface());
			obj.addSubFunction('Intensity', 'rietveld.func.spec.diffpeaks.Intensity', rietveld.func.spec.diffpeaks.Intensity());
			obj.addSubFunction('Strain', 'rietveld.func.spec.diffpeaks.strain.StrainInterface', rietveld.func.spec.diffpeaks.strain.StrainInterface());
		end
	end
end

