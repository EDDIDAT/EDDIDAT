classdef Mod2 < rietveld.func.spec.diffpeaks.strain.StrainInterface

	methods (Access = public)
		
		function eps_hkl = execute(obj, acm, general, meas, phase, spec)
		% acm wird aus Effizienzgruenden direkt uebergeben
			
			tau = obj.sfwc.Tau.execute(acm, general, meas, phase, spec);
% 			disp(tau)
% 			sigmatau = phase.StressCoef1 + phase.StressCoef2.*tau + 2.*phase.StressCoef3.*tau.^2;
            
%             sigma11 = phase.Sigma11stressCoef1 + phase.Sigma11stressCoef2.*tau + 2.*phase.Sigma11stressCoef3.*tau.^2;
%             sigma22 = phase.Sigma22stressCoef1 + phase.Sigma22stressCoef2.*tau + 2.*phase.Sigma22stressCoef3.*tau.^2;
            
%             if tau == 0
%                 sigma13 = 0;
%             else
%                 sigma13 = phase.Sigma13stressCoef1 + phase.Sigma13stressCoef2.*tau + 2.*phase.Sigma13stressCoef3.*tau.^2;
%             end
%             
%             if tau == 0
%                 sigma23 = 0;
%             else
%                 sigma23 = phase.Sigma23stressCoef1 + phase.Sigma23stressCoef2.*tau + 2.*phase.Sigma23stressCoef3.*tau.^2;
%             end
            
%             sigmatau = phase.StressCoef1./(phase.StressCoef3.*tau + 1) + ...
% 				phase.StressCoef2.*tau./((phase.StressCoef3.*tau + 1)).^2;

% 			eps_hkl = ((sind(spec.Psi)^2) * general.DEK_S2 + 2 * general.DEK_S1) .* sigmatau;

            sigma11 = phase.Sigma11stressCoef1 + ((0-phase.Sigma11stressCoef1)/phase.Sigma11stressCoef2) .* (1-exp(-phase.Sigma11stressCoef2./tau)) .* tau;
            sigma22 = phase.Sigma22stressCoef1 + ((0-phase.Sigma22stressCoef1)/phase.Sigma22stressCoef2) .* (1-exp(-phase.Sigma22stressCoef2./tau)) .* tau;
            
%             eps_hkl = general.DEK_S2 .*(sind(spec.Psi)^2 * (sigma11 .* cosd(spec.Phi).^2 + sigma22 .* sind(spec.Phi).^2)) + ...
%                         general.DEK_S1 .* (sigma11 + sigma22);
                    
              eps_hkl = (general.DEK_S2 .* cosd(spec.Phi).^2 .* sind(spec.Psi)^2 + general.DEK_S1) .* sigma11 + ...
                        (general.DEK_S2 .* sind(spec.Phi).^2 .* sind(spec.Psi)^2 + general.DEK_S1) .* sigma22;
                    
%             eps_hkl = general.DEK_S2 .*(sind(spec.Psi)^2 * (sigma11 .* cosd(spec.Phi).^2 + sigma22 .* sind(spec.Phi).^2) + ...
%                         sind(2.*spec.Psi) .* (sigma13 .* cosd(spec.Phi) + sigma23 .* sind(spec.Phi))) + ...
%                         general.DEK_S1 .* (sigma11 + sigma22);        
%             
          % Allgemeine Form der Grundgleichung der RSA (sigma33 = 0,
          % sigma12 = 0).
%             sigma11 = phase.Sigma11stressCoef1 + phase.Sigma11stressCoef2.*tau + 2.*phase.Sigma11stressCoef3.*tau.^2;
%             
%             sigma22 = phase.Sigma22stressCoef1 + phase.Sigma22stressCoef2.*tau + 2.*phase.Sigma22stressCoef3.*tau.^2;
%             
%             sigma13 = phase.Sigma13stressCoef1 + phase.Sigma13stressCoef2.*tau + 2.*phase.Sigma13stressCoef3.*tau.^2;
%             
%             sigma23 = phase.Sigma23stressCoef1 + phase.Sigma23stressCoef2.*tau + 2.*phase.Sigma23stressCoef3.*tau.^2;
%             
%             eps_hkl = general.DEK_S2 .* (sind(spec.Psi)^2 .* (sigma11 .* cosd(spec.Phi).^2 + ...
%                         sigma22 .* sind(spec.Phi).^2) + sind(2 .* spec.Psi) .* (sigma13 .* cosd(spec.Phi) + ...
%                         sigma23 .* sind(spec.Phi))) + general.DEK_S1 .* (sigma11 + sigma22);
            
		end

		function obj = addFunctionParameters(obj, pc)

			obj.addParameter(pc, 'DEK_S1',...
				'Category', 'Material',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'DEK_S2',...
				'Category', 'Material',...
				'ParamSize', [NaN, 1],...
				'Constant', true,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'TwoTheta',...
				'Category', 'Measurement',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', false,...
				'SpecDep', false);
			obj.addParameter(pc, 'Psi',...
				'Category', 'Measurement',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', false,...
				'SpecDep', true);
            obj.addParameter(pc, 'Phi',...
				'Category', 'Measurement',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', false,...
				'SpecDep', true);
% 			obj.addParameter(pc, 'StressCoef',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [3, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'StressCoef1',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'StressCoef2',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'StressCoef3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
            
            obj.addParameter(pc, 'Sigma11stressCoef1',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'Sigma11stressCoef2',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma11stressCoef3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
            obj.addParameter(pc, 'Sigma22stressCoef1',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'Sigma22stressCoef2',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma22stressCoef3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
%             obj.addParameter(pc, 'Sigma13stressCoef1',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma13stressCoef2',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma13stressCoef3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
%             obj.addParameter(pc, 'Sigma23stressCoef1',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma23stressCoef2',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'Sigma23stressCoef3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'sigmatau',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', true);
		end
	end
	
	methods (Access = protected)
		
		function obj = initSubFunctions(obj)
			
			obj.addSubFunction('Tau', 'rietveld.func.spec.diffpeaks.Tau', rietveld.func.spec.diffpeaks.Tau());
		end
	end
	
end

