classdef TCHPV_mod < rietveld.func.spec.diffpeaks.PeakInterface

	methods (Access = public)
		
		function Y = execute(obj, X, general, meas, phase, spec)
			
			ep = obj.sfwc.EnergyPos.execute([], general, meas, phase, spec);
			% Mehrfach benoetigt, aber hier nur einmal berechnet
			acm = obj.sfwc.AttenuationCoeffMat.execute(ep, general, meas, phase, spec);			
			intensity = obj.sfwc.Intensity.execute(ep, acm, general, meas, phase, spec);
			eps_hkl = obj.sfwc.Strain.execute(acm, general, meas, phase, spec);
			tau = obj.sfwc.Tau.execute(acm, general, meas, phase, spec);
			
% 			phase.beta_size = 6.199./(sind(meas.TwoTheta./2).*phase.Domain_size);
% 			LayerThickness = phase.LayerThickness;

% 								phase.P_Size1.*exp(-phase.LayerThickness1.*tau)./tau
% 								+ ...
%								phase.X_Size1.*exp(-phase.LayerThickness1.*tau)./tau
%% Simulation
% auskommentieren, wenn Spektrum gefittet wird

% 			% FWHM_kG bzw. FWHM_kL im Laplace-Space
 			FWHM_kG = phase.P_Size1.*exp(-phase.LayerThickness1./tau) + ...
 								(phase.P_Size2-phase.P_Size1).*exp(-phase.LayerThickness2./tau);% + ...
%  								(phase.P_Size3-phase.P_Size2).*exp(-phase.LayerThickness3./tau);% + ...
%  								(phase.P_Size4-phase.P_Size3).*exp(-phase.LayerThickness4./tau) + ...
%  								(phase.P_Size5-phase.P_Size4).*exp(-phase.LayerThickness5./tau); % + ...
%  								(phase.P_Size6-phase.P_Size5).*exp(-phase.LayerThickness6./tau);
							
			FWHM_kL = phase.X_Size1.*exp(-phase.LayerThickness1./tau) + ...
 								(phase.X_Size2-phase.X_Size1).*exp(-phase.LayerThickness2./tau);% + ...
%  								(phase.X_Size3-phase.X_Size2).*exp(-phase.LayerThickness3./tau);% + ...
%  								(phase.X_Size4-phase.X_Size3).*exp(-phase.LayerThickness4./tau) + ...
%  								(phase.X_Size5-phase.X_Size4).*exp(-phase.LayerThickness5./tau); % + ...
%  								(phase.X_Size6-phase.X_Size5).*exp(-phase.LayerThickness6./tau);
							
% 			disp(beta_kG)				
			
 			
% % 			beta_kG = phase.P_Size;% .* phase.SizeFactor;
% % 			disp(beta_kG)
% % 			beta_kL = phase.X_size;% beta_kG .* general.MixFactor;
% % 			disp(beta_kG)
% 
% % 			P_Size_sample = beta_kG.^2*log(2)./(pi./4);
% % % 			disp(P_Size_sample)
% % 			
% % 			X_Size_sample = beta_kL./(pi./2);
% % % 			disp(X_Size_sample)

% 			beta_kG = phase.P_Size1 + (phase.P_Size2 - phase.P_Size1) .* heaviside(tau -phase.LayerThickness2) + ...
% 								(phase.P_Size3 - phase.P_Size2) .* heaviside(tau-phase.LayerThickness3) + ...
% 								(phase.P_Size4 - phase.P_Size3) .* heaviside(tau-phase.LayerThickness4) + ...
% 								(phase.P_Size5 - phase.P_Size4) .* heaviside(tau-phase.LayerThickness5);% + ...
% % 								(phase.P_Size6 - phase.P_Size5) .* heaviside(tau-phase.LayerThickness6);
% 				
% 			beta_kL = phase.X_Size1 + (phase.X_Size2 - phase.X_Size1) .* heaviside(tau -phase.LayerThickness2) + ...
% 								(phase.X_Size3 - phase.X_Size2) .* heaviside(tau-phase.LayerThickness3) + ...
% 								(phase.X_Size4 - phase.X_Size3) .* heaviside(tau-phase.LayerThickness4) + ...
% 								(phase.X_Size5 - phase.X_Size4) .* heaviside(tau-phase.LayerThickness5);% + ...
% % 								(phase.X_Size6 - phase.X_Size5) .* heaviside(tau-phase.LayerThickness6);

% 			disp(beta_kG)

% 			P_Size_sample = beta_kG./(1/2*sqrt(pi./log(2)));
% 			disp(P_Size_sample)
			
% 			X_Size_sample = beta_kL.*(2./pi);
% 			disp(X_Size_sample)				
			
% 			P_Size = P_Size_sample + phase.P_Size_Instr;
% 			X_Size = X_Size_sample + phase.X_Size_Instr;
			
			P_Size = FWHM_kG + phase.P_Size_Instr;
			X_Size = FWHM_kL + phase.X_Size_Instr;
			
% 			disp(P_Size)
% 			disp(X_Size)

			H_kG = sqrt(P_Size + general.U_Strain .* (ep.^2) + general.V_Detector .* ep);
% 			disp('H_kG:')
% 			disp(H_kG)
			
			H_kL = X_Size + general.Y_Strain .* ep + general.Z_Detector .* (ep.^2);
% 			disp('H_kL:')
% 			disp(H_kL)

%% Fit
% auskommentieren, wenn Spektrum simuliert wird

% 			% P_Size im Ortsraum
% 			P_Size_Ortsraum = general.P_Size1 + (general.P_Size2 - general.P_Size1) .* heaviside(tau - general.LayerThickness2) + ...
% 								(general.P_Size3 - general.P_Size2) .* heaviside(tau-general.LayerThickness3) + ...
% 								(general.P_Size4 - general.P_Size3) .* heaviside(tau-general.LayerThickness4) + ...
% 								(general.P_Size5 - general.P_Size4) .* heaviside(tau-general.LayerThickness5) + ...
% 								(general.P_Size6 - general.P_Size5) .* heaviside(tau-general.LayerThickness6);
% 							
% 			% X_Size im Ortsraum
% 			X_Size_Ortsraum = general.X_Size1 + (general.X_Size2 - general.X_Size1) .* heaviside(tau - general.LayerThickness2) + ...
% 								(general.X_Size3 - general.X_Size2) .* heaviside(tau-general.LayerThickness3) + ...
% 								(general.X_Size4 - general.X_Size3) .* heaviside(tau-general.LayerThickness4) + ...
% 								(general.X_Size5 - general.X_Size4) .* heaviside(tau-general.LayerThickness5) + ...
% 								(general.X_Size6 - general.X_Size5) .* heaviside(tau-general.LayerThickness6);
% 			disp(P_Size_Ortsraum)
% 			
% 			H_kG = sqrt(P_Size_Ortsraum + general.U_Strain .* (ep.^2) + general.V_Detector .* ep);
% % 			disp('H_kG:')
% % 			disp(H_kG)
% 			
% 			H_kL = X_Size_Ortsraum + general.Y_Strain .* ep + general.Z_Detector .* (ep.^2);
% % 			disp('H_kL:')
% % 			disp(H_kL)

%% Grundfunktion

			H_k = (H_kG.^5 + 2.69269.*H_kG.^4.*H_kL + 2.42843.*H_kG.^3.*H_kL.^2 ...
				+ 4.47163.*H_kG.^2.*H_kL.^3 + 0.07842.*H_kG.*H_kL.^4 + H_kL.^5).^(0.2);
% 			disp('H_k:')
% 			disp(H_k)
			
			
			GL = 1.36603 .* (H_kL ./ H_k) - 0.47719 .* (H_kL ./ H_k).^2 + 0.11116 .* (H_kL ./ H_k).^3;
% 			disp(GL)
			Y = 0;
			for i = 1:size(general.H, 1)
				X_shift = X - ep(i);
				Y = Y + intensity(i) * (GL(i) * (2 / (pi * H_k(i))) ./ ...
					(1 + 4 * ((X_shift + eps_hkl(i) * ep(i)) / H_k(i)).^2) ...
					+ (1 - GL(i)) * (2 * sqrt(log(2)/pi) / H_k(i)) * ...
					exp(-4 * log(2) * ((X_shift + eps_hkl(i) * ep(i)) / H_k(i)).^2));
			end
		end
		
		function obj = addFunctionParameters(obj, pc)
			
			obj.addParameter(pc, 'TwoTheta',...
				'Category', 'Measurement',...
				'ParamSize', [1, 1],...
				'Constant', true,...
				'PhaseDep', false,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'Domain_size',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'LayerThickness',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
			
			obj.addParameter(pc, 'LayerThickness1',...
				'Category', 'Peaks',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'LayerThickness2',...
				'Category', 'Peaks',...
				'ParamSize', [NaN, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'LayerThickness3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'LayerThickness4',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'LayerThickness5',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'LayerThickness6',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
			
			
% 			obj.addParameter(pc, 'SizeFactor',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'MixFactor',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'beta_size',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'P_Size',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);

			obj.addParameter(pc, 'P_Size1',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'P_Size2',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'P_Size3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'P_Size4',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'P_Size5',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'P_Size6',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
			
			obj.addParameter(pc, 'P_Size_Instr',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'U_Strain',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'V_Detector',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
% 			obj.addParameter(pc, 'X_Size',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [NaN, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);

			obj.addParameter(pc, 'X_Size1',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'X_Size2',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
% 			obj.addParameter(pc, 'X_Size3',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'X_Size4',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'X_Size5',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
% 			obj.addParameter(pc, 'X_Size6',...
% 				'Category', 'Peaks',...
% 				'ParamSize', [1, 1],...
% 				'Constant', false,...
% 				'PhaseDep', true,...
% 				'SpecDep', false);
			
			obj.addParameter(pc, 'X_Size_Instr',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', false);
			obj.addParameter(pc, 'Y_Strain',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
			obj.addParameter(pc, 'Z_Detector',...
				'Category', 'Peaks',...
				'ParamSize', [1, 1],...
				'Constant', false,...
				'PhaseDep', true,...
				'SpecDep', true);
		end
	end
	
	methods (Access = protected)
		
		function obj = initSubFunctions(obj)
			
			obj.addSubFunction('AttenuationCoeffMat', 'rietveld.func.spec.corr.AttenuationCoeffMat', rietveld.func.spec.corr.AttenuationCoeffMat());
			obj.addSubFunction('EnergyPos', 'rietveld.func.spec.EnergyPosInterface', rietveld.func.spec.EnergyPosInterface());
			obj.addSubFunction('Intensity', 'rietveld.func.spec.diffpeaks.Intensity', rietveld.func.spec.diffpeaks.Intensity());
			obj.addSubFunction('Strain', 'rietveld.func.spec.diffpeaks.strain.StrainInterface', rietveld.func.spec.diffpeaks.strain.StrainInterface());
			obj.addSubFunction('Tau', 'rietveld.func.spec.diffpeaks.Tau', rietveld.func.spec.diffpeaks.Tau());
		end
	end
end

